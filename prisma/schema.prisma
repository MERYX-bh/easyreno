generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  userType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id                Int      @id @default(autoincrement())
  nomEntreprise     String
  siret             String   @unique
  email             String   @unique
  motDePasse        String
  adresse           String
  complementAdresse String?
  ville             String
  codePostal        String
  corpsEtat         String
  autreCorpsEtat    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations inverses
  projects   Project[]
  quotes     Quote[]
  exchanges  Exchange[]
  invoices   Invoice[]
  activities Activity[]
}

model Ad {
  id          Int      @id @default(autoincrement())
  title       String
  location    String
  workArea    String
  maxBudget   Float
  description String
  owner       Owner    @relation(fields: [ownerId], references: [id])
  ownerId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  quotes      Quote[] // Relation avec les devis
}

model Quote {
  id          Int      @id @default(autoincrement())
  title       String
  price       Float
  description String
  fileUrl     String? // Stocke l'URL du fichier devis (optionnel)
  status      String   @default("pending") // pending, accepted, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ad   Ad  @relation(fields: [adId], references: [id], map: "Ad_Quote_fkey")
  adId Int

  company   Company? @relation(fields: [companyId], references: [id], map: "Company_Quote_fkey")
  companyId Int?

  owner   Owner? @relation(fields: [ownerId], references: [id], map: "Owner_Quote_fkey")
  ownerId Int?

  project   Project? @relation(fields: [projectId], references: [id], map: "Project_Quote_fkey")
  projectId Int?
}

model Owner {
  id                Int        @id @default(autoincrement())
  nom               String
  prenom            String
  email             String     @unique
  motDePasse        String
  adresse           String
  complementAdresse String?
  ville             String
  codePostal        String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  projects          Project[]
  exchanges         Exchange[]
  quotes            Quote[]
  ads               Ad[] // ✅ Ajout de la relation inverse avec Ad
}

model Project {
  id           Int      @id @default(autoincrement())
  clientName   String
  projectTitle String
  description  String
  location     String
  startDate    DateTime
  endDate      DateTime
  status       String
  budget       Float
  owner        Owner    @relation(fields: [ownerId], references: [id])
  ownerId      Int
  company      Company? @relation(fields: [companyId], references: [id])
  companyId    Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // ✅ Ajout des relations inverses manquantes
  tasks     Task[] // Relation avec Task
  employees Employee[] // Relation avec Employee
  quotes    Quote[] // Relation avec Quote
  invoices  Invoice[] // Relation avec Invoice
}

model Task {
  id          Int      @id @default(autoincrement())
  description String
  completed   Boolean  @default(false)
  date        DateTime
  delayed     Boolean  @default(false)
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Employee {
  id        Int       @id @default(autoincrement())
  name      String
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Exchange {
  id        Int       @id @default(autoincrement())
  title     String
  object    String
  company   Company   @relation(fields: [companyId], references: [id])
  companyId Int
  owner     Owner     @relation(fields: [ownerId], references: [id])
  ownerId   Int
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  sender     String
  exchange   Exchange @relation(fields: [exchangeId], references: [id])
  exchangeId Int
  createdAt  DateTime @default(now())
}

model Invoice {
  id           Int      @id @default(autoincrement())
  clientName   String
  projectTitle String
  amount       Float
  date         DateTime
  status       String
  details      String?  @db.Text
  company      Company  @relation(fields: [companyId], references: [id])
  companyId    Int
  project      Project  @relation(fields: [projectId], references: [id])
  projectId    Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Activity {
  id           Int      @id @default(autoincrement())
  action       String
  projectTitle String
  company      Company  @relation(fields: [companyId], references: [id])
  companyId    Int
  createdAt    DateTime @default(now())
}
